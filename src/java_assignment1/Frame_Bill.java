/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package java_assignment1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL
 */
public class Frame_Bill extends javax.swing.JFrame {

    /**
     * Creates new form Frame_Bill
     */
    public String name;
    public String user;

    public Frame_Bill() {
        initComponents();
        getData();
        showTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        billtable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        totaltxt = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        credittxt = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        billtxt = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        paidtxt = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        billtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Programme Code", "Course"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        billtable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(billtable);

        jLabel2.setText("Total Course");

        jLabel3.setText("Total Credit Hour:");

        jLabel4.setText("Total Pending");

        jLabel5.setText("Total Paid");

        paidtxt.setText("0");

        jButton1.setText("Pay");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/java_assignment1/logo.png"))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel7.setText("BILL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(credittxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(totaltxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(billtxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(paidtxt, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(0, 35, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(totaltxt))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(credittxt))
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(billtxt))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(paidtxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String student = getData();
        int amount = Integer.parseInt(billtxt.getText());
        String statt = "Paid";
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to pay the payment?", "Warning", dialogButton);
        if (dialogResult == JOptionPane.YES_OPTION) {
            Payment payment = new Payment();
            ArrayList<Payment> payy = payment();
            int aa = 0;
            for (int i = 0; i < payy.size(); i++) {
                aa = payment.generateBill(amount, statt, student);
                switch (aa) {
                    case 1:
                        JOptionPane.showMessageDialog(null, "Your bill have been paid!");
                        billtxt.setText("0");
                        ArrayList<timetable> timee = timetable();
                        String total = new Integer(timee.size()).toString();
                        int credit = timee.size() * 4;
                        String crr = new Integer(credit).toString();
                        int totalll = timee.size() * 1200;
                        String tol = new Integer(totalll).toString();
                        paidtxt.setText(tol);
                        Frame_Receipt fr = new Frame_Receipt();
                        this.setVisible(false);
                        fr.setVisible(true);
                        break;
                    case 2:
                        JOptionPane.showMessageDialog(null, "Payment Fail, please try again");
                        break;
                    default:
                        break;
                }
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Frame_Student fs = new Frame_Student();
        fs.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame_Bill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame_Bill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame_Bill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame_Bill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame_Bill().setVisible(true);
            }
        });
    }

    public String getData() {
        Database database = new Database();
        database.getAllData();

        try {
            ArrayList<User> userList = database.getUser();

            for (int i = 0; i < userList.size(); i++) {
                String user = userList.get(i).getUsername();
                ArrayList<Student> studList = database.getStudent();
                int sizee = studList.size();
                for (int z = 0; z < sizee; z++) {
                    if (studList.get(z).getStudentUsername().compareTo(user) == 0) {
                        this.user = studList.get(z).getStudentUsername();
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Profile Error, " + e);
        }

        return this.user;
    }

    public ArrayList<timetable> timetable() {
        ArrayList<timetable> timeList = new ArrayList<timetable>();
        String xx = getData();
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
            Connection timeConn = DriverManager.getConnection("jdbc:derby://localhost:1527/ELearningDatabase", "localhost", "123456");
            String timeSql = "SELECT * FROM STUDENTSCHEDULE where STUDENTUSER = ?";
            PreparedStatement timeStmt = timeConn.prepareStatement(timeSql);
            timeStmt.setString(1, xx);
            ResultSet timeResult = timeStmt.executeQuery();
            while (timeResult.next()) {
                timetable tt = new timetable(timeResult.getString("PROGRAMMECODE"), timeResult.getString("YEARS"), timeResult.getString("SEMESTERS"), timeResult.getString("COURSE"), timeResult.getString("DAY"), timeResult.getString("TIME"), timeResult.getString("STUDENTUSER"), timeResult.getInt("CREDITHOUR"));
                timeList.add(tt);
            }
            timeConn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Time Table List Error, " + e);
        }
        return timeList;
    }

    public ArrayList<Payment> payment() {
        ArrayList<Payment> paymentList = new ArrayList<Payment>();
        String xx = getData();
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
            Connection payConn = DriverManager.getConnection("jdbc:derby://localhost:1527/ELearningDatabase", "localhost", "123456");
            String paySql = "SELECT * FROM PAYMENT where STUDENTID = ?";
            PreparedStatement payStmt = payConn.prepareStatement(paySql);
            payStmt.setString(1, xx);
            ResultSet payResult = payStmt.executeQuery();
            while (payResult.next()) {
                Payment pp = new Payment(payResult.getInt("PAYMENTID"), payResult.getInt("AMOUNT"), payResult.getString("DESCRIPTION"), payResult.getString("PAYMENTDATE"), payResult.getString("STATUS"), payResult.getString("STUDENTID"));
                paymentList.add(pp);
            }
            payConn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Payment List Error, " + e);
        }
        return paymentList;
    }

    public void showTable() {

        ArrayList<Payment> pay = payment();
        for (int a = 0; a < pay.size(); a++) {
            String statt = pay.get(a).getStatus();
            String pending = "Pending";
            String paid = "Paid";
            if (statt.equals(pending)) {
                Registration rg = new Registration();
                ArrayList<timetable> timee = timetable();

                String total = new Integer(timee.size()).toString();
                totaltxt.setText(total);

                int credit = rg.calculateTotalCreditHour(this.user);
                String crr = new Integer(credit).toString();
                credittxt.setText(crr);

                int totalll = timee.size() * 1200;
                String tol = new Integer(totalll).toString();
                billtxt.setText(tol);

                DefaultTableModel model = (DefaultTableModel) billtable.getModel();
                Object[] row = new Object[2];
                for (int i = 0; i < timee.size(); i++) {
                    row[0] = timee.get(i).getProgramme();
                    row[1] = timee.get(i).getCourse();
                    model.addRow(row);
                }
            } else if (statt.equals(paid)) {
                Registration rg = new Registration();
                ArrayList<timetable> timee = timetable();

                String total = new Integer(timee.size()).toString();
                totaltxt.setText(total);

                int credit = rg.calculateTotalCreditHour(this.user);
                String crr = new Integer(credit).toString();
                credittxt.setText(crr);

                int totalll = timee.size() * 1200;
                String tol = new Integer(totalll).toString();
                paidtxt.setText(tol);
                billtxt.setText("0");
                
                DefaultTableModel model = (DefaultTableModel) billtable.getModel();
                Object[] row = new Object[2];
                for (int i = 0; i < timee.size(); i++) {
                    row[0] = timee.get(i).getProgramme();
                    row[1] = timee.get(i).getCourse();
                    model.addRow(row);
                }
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable billtable;
    private javax.swing.JLabel billtxt;
    private javax.swing.JLabel credittxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel paidtxt;
    private javax.swing.JLabel totaltxt;
    // End of variables declaration//GEN-END:variables
}
